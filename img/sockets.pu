@startuml
'hide footbox

control Server
participant OS1
participant OS2
control Client

== server listening ==

Server -> OS1 :  ""new ServerSocket()""
activate Server

create boundary ServerSocket
OS1 -> ServerSocket : creation
Server <-- ServerSocket : return reference to caller
deactivate Server

Server -> ServerSocket : ""bind(WELL_KNOWN_PORT)""
activate Server
ServerSocket -> OS1 : reserve ""WELL_KNOWN_PORT""
Server <-- ServerSocket : returns ""void"" if ok\nor throws ""BindException""
deactivate Server

Server -> ServerSocket: ""accept()""
activate Server
ServerSocket -> OS1 : listen for connections\non ""WELL_KNOWN_PORT""


== client connecting ==

OS2 <- Client : ""new Socket()""
activate Client

create boundary Socket1
OS2 -> Socket1 : creation
Socket1 --> Client : return reference to caller
deactivate Client

Socket1 <- Client : ""connect("IP address of Server", WELL_KNOWN_PORT)""
activate Client
Socket1 -> OS2 : connection request

OS2 -> OS1 : contact host

OS1 --> OS2 : host found with listening port\nor host not found within timout\nor host found but no listening service

OS2 --> Socket1 : connection established\nor exception

Socket1 --> Client : returns ""void"" if conncetion established\nor throws ""IOException""\nor throws SocketTimeoutException""""
deactivate Client

note right of Client: Client is connected now,\nand ready to interact

== in the meanwhile on the server side ==

create boundary Socket2
OS1 -> Socket2 : creation

Socket2 --> Server : return reference to caller of //accept()//
deactivate Server

note left of Server : Server is connected now,\nand ready to interact
@enduml